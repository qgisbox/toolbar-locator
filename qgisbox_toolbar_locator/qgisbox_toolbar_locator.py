# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QgsBoxToolbarLocator
                                 A QGIS plugin
 Help locate the relevant toolbar buttons
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-27
        git sha              : $Format:%H$
        copyright            : (C) 2025 by hxbb00
        email                : hxbb00@qq.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import os

# 将插件内的 libs 目录添加到 Python 路径
plugin_dir = os.path.dirname(__file__)
libs_dir = os.path.join(plugin_dir, "libs")
sys.path.insert(0, libs_dir)

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QObject, QEvent, QLibraryInfo, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QStyleFactory, QApplication
from qgis.core import QgsMessageLog, Qgis

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .qgisbox_toolbar_locator_dockwidget import QgsBoxToolbarLocatorDockWidget
import os.path

class TitleModifier(QObject):
    def __init__(self, parent):
        super().__init__(parent)
        self.is_updating = False  # 防止递归循环

    def eventFilter(self, obj, event):
        if event.type() == QEvent.WindowTitleChange:
            if not self.is_updating:  # 避免自身修改触发的事件
                self.is_updating = True
                try:
                    original_title = obj.windowTitle()
                    # 替换标题末尾的 " - QGIS"
                    new_title = original_title.replace("QGIS", "E-GIS")
                    obj.setWindowTitle(new_title)
                finally:
                    self.is_updating = False
        return super().eventFilter(obj, event)

class QgsBoxToolbarLocator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        bin_dir_os = QCoreApplication.applicationDirPath()
        # 向上导航到上级目录
        parent_dir = os.path.dirname(bin_dir_os)
        # 拼接share目录
        share_dir_os = os.path.join(parent_dir, "share")
        # 转换为绝对路径
        share_dir_os_abs = os.path.abspath(share_dir_os)
        
        trans_path = os.path.join(share_dir_os_abs, "qt5", "translations")

        # 创建翻译器对象
        self.qt_translator = QTranslator()

        # 加载中文翻译文件
        if self.qt_translator.load("qt_zh_CN.qm", trans_path):
            QCoreApplication.installTranslator(self.qt_translator)
        else:
            QgsMessageLog.logMessage(
                "无法加载翻译文件: qt_zh_CN.qm",  # 日志内容
                "E-GIS",         # 日志标签（在消息日志面板中分组显示）
                Qgis.Info           # 日志级别
            )

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        
        QgsMessageLog.logMessage(
            "locale: {}".format(locale),  # 日志内容
            "E-GIS",         # 日志标签（在消息日志面板中分组显示）
            Qgis.Info           # 日志级别
        )
        
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QgsBoxToolbarLocator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QGIS Toolbar Locator')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QgsBoxToolbarLocator')
        self.toolbar.setObjectName(u'QgsBoxToolbarLocator')

        mainWindow = iface.mainWindow()
        self.title_modifier = TitleModifier(mainWindow)
        mainWindow.installEventFilter(self.title_modifier)
        mainWindow.setWindowTitle("我的地图文档 - E-GIS")
        
        # 加载样式表        
        modern_style_qss = os.path.join(libs_dir, "modern_style.qss")
        with open(modern_style_qss, "r") as f:
            QApplication.instance().setStyleSheet(f.read())
        QApplication.instance().setStyle(QStyleFactory.create("Fusion"))

        #print "** INITIALIZING QgsBoxToolbarLocator"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QgsBoxToolbarLocator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qgisbox_toolbar_locator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Locate the toolbar buttons'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.run()

        settings = QSettings()
        state = settings.value("QGIS_BOX_DOCK_LOCATIONS")
        if state:
            self.restoreState(state)

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING QgsBoxToolbarLocator"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD QgsBoxToolbarLocator"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QGIS Toolbar Locator'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

        settings = QSettings()
        settings.setValue("QGIS_BOX_DOCK_LOCATIONS", self.saveState())

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING QgsBoxToolbarLocator"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QgsBoxToolbarLocatorDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
